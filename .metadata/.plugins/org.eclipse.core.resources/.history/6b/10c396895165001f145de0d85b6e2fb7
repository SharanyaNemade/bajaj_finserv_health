package main;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class MD5HashGenerator {

    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.println("Usage: java -jar MD5HashGenerator.jar <PRN Number> <JSON file path>");
            System.exit(1);
        }

        String prnNumber = args[0];
        String jsonFilePath = args[1];

        try {
            // Read and parse JSON file
            JSONObject jsonObject = readJsonFile(jsonFilePath);

            // Traverse JSON and get the value associated with the key "destination"
            String destinationValue = traverseJson(jsonObject, "destination");

            // Generate a random alphanumeric string of size 8 characters
            String randomString = generateRandomString();

            // Concatenate PRN Number, destination value, and random string
            String concatenatedString = prnNumber + destinationValue + randomString;

            // Generate MD5 hash
            String md5Hash = generateMD5Hash(concatenatedString);

            // Print the result
            System.out.println(md5Hash + ";" + randomString);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static JSONObject readJsonFile(String filePath) throws IOException, ParseException {
        JSONParser parser = new JSONParser();
        try (FileReader reader = new FileReader(filePath)) {
            return (JSONObject) parser.parse(reader);
        }
    }

    private static String traverseJson(JSONObject jsonObject, String key) {
        // Implement your JSON traversal logic here
        // Return the value associated with the key "destination"
        // If key not found, return an appropriate default value
        return "SampleDestinationValue";
    }

    private static String generateRandomString() {
        // Generate a random alphanumeric string of size 8 characters
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder randomString = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < 8; i++) {
            randomString.append(characters.charAt(random.nextInt(characters.length())));
        }
        return randomString.toString();
    }

    private static String generateMD5Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] hashBytes = md.digest(input.getBytes());
        StringBuilder hashString = new StringBuilder();
        for (byte b : hashBytes) {
            hashString.append(String.format("%02x", b));
        }
        return hashString.toString();
    }
}
